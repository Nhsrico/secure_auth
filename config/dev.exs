import Config

config :secure_auth, SecureAuth.Repo,
  adapter: Ecto.Adapters.SQLite3,
  database: Path.expand("../secure_auth_dev.db", __DIR__),
  pool_size: 5,
  stacktrace: true,
  show_sensitive_data_on_connection_error: true

# config :secure_auth, SecureAuth.Repo,
#   #username: "secure_auth_dev",
#   username: "postgres",
#   password: "postgres",
#   hostname: "localhost",
#   database: "secure_auth_dev",
#   stacktrace: true,
#   show_sensitive_data_on_connection_error: true,
#   pool_size: 10


# # Configure your database
# config :secure_auth, SecureAuth.Repo,
#   database: Path.expand("../secure_auth_dev.db", __DIR__),
#   pool_size: 5,
#   stacktrace: true,
#   show_sensitive_data_on_connection_error: true

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :secure_auth, SecureAuthWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: String.to_integer(System.get_env("PORT") || "4000")],
  url: [host: "localhost", port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "Tp8i8EhfhG+SqakG53P7ZHUitf1hlE6pj3HDpkIStSNDn4ccc+c6YWqbw72Fndg8",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:secure_auth, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:secure_auth, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :secure_auth, SecureAuthWeb.Endpoint,
  live_reload: [
    web_console_logger: true,
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/secure_auth_web/(?:controllers|live|components|router)/?.*\.(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :secure_auth, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :default_formatter, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup.
  # Changing this configuration will require mix clean and a full recompile.
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true




# # Disable swoosh api client as it is only required for production adapters.
# config :secure_auth, SecureAuth.Mailer,
#   adapter: Swoosh.Adapters.Local

# config :swoosh, :api_client, false


### taking this out to let runtime.exs set the stuff up and not override it
# # Configure SendGrid mailer for production
# config :secure_auth, SecureAuth.Mailer,
#   adapter: Swoosh.Adapters.Sendgrid,
#   api_key: System.get_env("SENDGRID_API_KEY")

# # Configures Swoosh API Client
# config :swoosh, api_client: Swoosh.ApiClient.Finch, finch_name: SecureAuth.Finch

# # Disable Swoosh Local Memory Storage
# config :swoosh, local: false
